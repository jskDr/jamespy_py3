%load_ext autoreload
%autoreload 2

import matplotlib.pyplot as plt
import numpy as np

from wireless import npolar_analysis

def plot_boundary(N_iter=10):
    """
    Polar table
  s c:  u0 u1: x0 x1: y0 y1 (no noise 1-2x) 
  0 r:  0  0:  0  0:  1  1
  1 g:  0  1:  1  1: -1 -1
  2 b:  1  0:  1  0: -1  1
  3 k:  1  1:  0  1:  1 -1   
    """    
    y, ud = npolar_analysis.coding(N_iter)
    ud_s = ud[:,0]*2 + ud[:,1]
    ct = np.array(['r', 'g', 'b', 'k'])
    plt.scatter(y[:,0], y[:,1], color=ct[ud_s], marker='.')
    
plot_boundary(10000)

def plot_boundary_K1(N_iter=10, frozen_flag_n=np.array([1,0])):
    """
  frozen_flag_n=np.array([1,0])
  Notice that Frozen force u0 = 0 (no 1)
  s c:  u0 u1: x0 x1: y0 y1 (no noise 1-2x) 
  0 r:  0  0:  0  0:  1  1
  1 b:  0  1:  1  1: -1 -1
   X :  1  0:  1  0: -1  1
   X :  1  1:  0  1:  1 -1   

 frozen_flag_n=np.array([0,1])
  Notice that Frozen force u0 = 0 (no 1)
  s c:  u0 u1: x0 x1: y0 y1 (no noise 1-2x) 
  0 r:  0  0:  0  0:  1  1
   X :  0  1:  1  1: -1 -1
  1 b:  1  0:  1  0: -1  1
   X :  1  1:  0  1:  1 -1   
    """        
    y, ud = npolar_analysis.coding(N_iter, frozen_flag_n)
    ud_s = ud[:,0] #[:,0] + ud[:,1]*2
    ct = np.array(['r', 'b'])
    plt.scatter(y[:,0], y[:,1], color=ct[ud_s], marker='.')

plot_boundary_K1(10000, frozen_flag_n=np.array([1,0]))

plot_boundary_K1(10000, frozen_flag_n=np.array([0,1]))